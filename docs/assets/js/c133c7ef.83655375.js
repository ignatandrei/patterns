"use strict";(self.webpackChunkpatterns_site=self.webpackChunkpatterns_site||[]).push([[1642],{3927:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(4848),a=n(8453);const i={id:"Strategy",title:"Strategy",tags:["Strategy","https://github.com/ignatandrei/patterns","behavioral","design pattern","Strategy"]},s="Pattern:  Strategy",o={id:"patterns/Strategy",title:"Strategy",description:"Strategy pattern allows a client to choose from a family of algorithms at runtime. It is used when the client expects to have multiple algorithms and wants to choose one of them at runtime.",source:"@site/docs/patterns/Strategy.md",sourceDirName:"patterns",slug:"/patterns/Strategy",permalink:"/patterns/docs/patterns/Strategy",draft:!1,unlisted:!1,tags:[{label:"Strategy",permalink:"/patterns/docs/tags/strategy"},{label:"https://github.com/ignatandrei/patterns",permalink:"/patterns/docs/tags/https-github-com-ignatandrei-patterns"},{label:"behavioral",permalink:"/patterns/docs/tags/behavioral"},{label:"design pattern",permalink:"/patterns/docs/tags/design-pattern"}],version:"current",frontMatter:{id:"Strategy",title:"Strategy",tags:["Strategy","https://github.com/ignatandrei/patterns","behavioral","design pattern","Strategy"]},sidebar:"tutorialSidebar",previous:{title:"Singleton",permalink:"/patterns/docs/patterns/Singleton"},next:{title:"Visitor",permalink:"/patterns/docs/patterns/Visitor"}},l={},c=[{value:"Example in .NET :",id:"example-in-net-",level:2},{value:"Strategy",id:"strategy",level:3},{value:"Learn More",id:"learn-more",level:2},{value:"Homework",id:"homework",level:2}];function p(t){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"pattern--strategy",children:"Pattern:  Strategy"}),"\n",(0,r.jsx)(e.p,{children:"Strategy pattern allows a client to choose from a family of algorithms at runtime. It is used when the client expects to have multiple algorithms and wants to choose one of them at runtime."}),"\n",(0,r.jsx)(e.h2,{id:"example-in-net-",children:"Example in .NET :"}),"\n",(0,r.jsx)(e.h3,{id:"strategy",children:"Strategy"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",metastring:'showLineNumbers title="Strategy example for Pattern Strategy"',children:'using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace Strategy;\r\ninternal class StrategyDemo\r\n{\r\n    public static void SortWithDifferentStrategies()\r\n    {\r\n        List<int> al = new ();\r\n        al.Add(102);\r\n        al.Add(201);\r\n        //sort ascending\r\n        al.Sort((x, y) => x.CompareTo(y));\r\n\r\n        for (int i = 0; i < al.Count; i++)\r\n        {\r\n            Console.WriteLine(al[i]);\r\n        }\r\n\r\n        Console.WriteLine("---------------");\r\n\r\n        //sort descending\r\n        al.Sort((y, x) => x.CompareTo(y));\r\n        for (int i = 0; i < al.Count; i++)\r\n        {\r\n            Console.WriteLine(al[i]);\r\n        }\r\n        Console.WriteLine("---------------");\r\n        //sort custom\r\n        al.Sort((x, y) => LastDigit(x).CompareTo(LastDigit(y)));\r\n        for (int i = 0; i < al.Count; i++)\r\n        {\r\n            Console.WriteLine(al[i]);\r\n        }\r\n\r\n        var array = al.FindAll(it => it > 10);\r\n\r\n\r\n    }\r\n\r\n    static int LastDigit(int x)\r\n    {\r\n        return x % 10;\r\n    }\r\n\r\n}\r\n\r\n\n'})}),"\n",(0,r.jsx)(e.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,r.jsx)("a",{href:"https://wiki.c2.com/?StrategyPattern",target:"_blank",children:"C2Wiki"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)("a",{href:"http://www.dofactory.com/net/strategy-design-pattern",target:"_blank",children:"dofactory"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)("a",{href:"https://github.com/kamranahmedse/design-patterns-for-humans?tab=readme-ov-file#-strategy",target:"_blank",children:"DPH"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)("a",{href:"https://en.wikipedia.org/wiki/Strategy_pattern",target:"_blank",children:"Wikipedia"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(e.h2,{id:"homework",children:"Homework"}),"\n",(0,r.jsx)(e.p,{children:"Image you want to serialize classes to XML,JSON and CSV . Implement a strategy that will allow you to choose between XML , JSON and CSV serialization at runtime."})]})}function d(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(p,{...t})}):p(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>o});var r=n(6540);const a={},i=r.createContext(a);function s(t){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),r.createElement(i.Provider,{value:e},t.children)}}}]);