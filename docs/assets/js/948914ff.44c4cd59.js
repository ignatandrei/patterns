"use strict";(self.webpackChunkpatterns_site=self.webpackChunkpatterns_site||[]).push([[1750],{4500:t=>{t.exports=JSON.parse('{"label":"design pattern","permalink":"/patterns/docs/tags/design-pattern","allTagsPath":"/patterns/docs/tags","count":14,"items":[{"id":"patterns/Adapter","title":"Adapter","description":"Adapter design pattern allows the interface of an existing class to be used as another interface.It is often used to make existing classes work with others without modifying their source code.","permalink":"/patterns/docs/patterns/Adapter"},{"id":"patterns/Builder","title":"Builder","description":"The intent of the Builder design pattern is to separate the construction of a complex object from its representation","permalink":"/patterns/docs/patterns/Builder"},{"id":"patterns/Chain","title":"Chain","description":"Chain of responsibility pattern allows an object to send a command without knowing what object will receive and handle it. Chain the receiving objects and pass the request along the chain until an object handles it","permalink":"/patterns/docs/patterns/Chain"},{"id":"patterns/Decorator","title":"Decorator","description":"Decorator allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class.","permalink":"/patterns/docs/patterns/Decorator"},{"id":"patterns/Facade","title":"Facade","description":"Facade is is an object that provides a simplified interface to a larger body of code, such as a class library.","permalink":"/patterns/docs/patterns/Facade"},{"id":"patterns/Factory","title":"Factory","description":"A factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be new","permalink":"/patterns/docs/patterns/Factory"},{"id":"patterns/IOC","title":"IOC","description":"Inversion of Control is a principle in software engineering by which the control of objects or portions of a program is transferred to a container or framework. It\'s a design principle in which custom-written portions of a computer program receive the flow of control from a generic framework.","permalink":"/patterns/docs/patterns/IOC"},{"id":"patterns/Iterator","title":"Iterator","description":"Iterator design pattern allows to traverse a container and access the container\'s elements.","permalink":"/patterns/docs/patterns/Iterator"},{"id":"patterns/Lazy","title":"Lazy","description":"Lazy initialization is the tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed.","permalink":"/patterns/docs/patterns/Lazy"},{"id":"patterns/NullObject","title":"NullObject","description":"Instead of returning null , use an object which implements the expected interface, but whose method body is empty.","permalink":"/patterns/docs/patterns/NullObject"},{"id":"patterns/Prototype","title":"Prototype","description":"It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects","permalink":"/patterns/docs/patterns/Prototype"},{"id":"patterns/Singleton","title":"Singleton","description":"Singleton pattern restricts the instantiation of a class to one object. It is used when you want to have one instance of a class that is shared across the application.","permalink":"/patterns/docs/patterns/Singleton"},{"id":"patterns/Strategy","title":"Strategy","description":"Strategy pattern allows a client to choose from a family of algorithms at runtime. It is used when the client expects to have multiple algorithms and wants to choose one of them at runtime.","permalink":"/patterns/docs/patterns/Strategy"},{"id":"patterns/Visitor","title":"Visitor","description":"Visitor pattern is a way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to existing object structures without modifying the structures.","permalink":"/patterns/docs/patterns/Visitor"}],"unlisted":false}')}}]);