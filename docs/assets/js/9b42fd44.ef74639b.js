"use strict";(self.webpackChunkpatterns_site=self.webpackChunkpatterns_site||[]).push([[5862],{1125:t=>{t.exports=JSON.parse('{"label":"https://github.com/ignatandrei/patterns","permalink":"/patterns/docs/tags/https-github-com-ignatandrei-patterns","allTagsPath":"/patterns/docs/tags","count":4,"items":[{"id":"patterns/Adapter","title":"Adapter","description":"Adapter design pattern allows the interface of an existing class to be used as another interface.It is often used to make existing classes work with others without modifying their source code.","permalink":"/patterns/docs/patterns/Adapter"},{"id":"patterns/Builder","title":"Builder","description":"The intent of the Builder design pattern is to separate the construction of a complex object from its representation","permalink":"/patterns/docs/patterns/Builder"},{"id":"patterns/Iterator","title":"Iterator","description":"Iterator design pattern allows to traverse a container and access the container\'s elements.","permalink":"/patterns/docs/patterns/Iterator"},{"id":"patterns/NullObject","title":"NullObject","description":"Instead of returning null , use an object which implements the expected interface, but whose method body is empty.","permalink":"/patterns/docs/patterns/NullObject"}],"unlisted":false}')}}]);