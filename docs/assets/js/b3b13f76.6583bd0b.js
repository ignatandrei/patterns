"use strict";(self.webpackChunkpatterns_site=self.webpackChunkpatterns_site||[]).push([[4625],{8765:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=r(4848),i=r(8453);const s={id:"IOC",title:"IOC",tags:["IOC","https://github.com/ignatandrei/patterns","behavioral","design pattern","IOC","DI"]},o="Pattern:  IOC",a={id:"patterns/IOC",title:"IOC",description:"Inversion of Control is a principle in software engineering by which the control of objects or portions of a program is transferred to a container or framework. It's a design principle in which custom-written portions of a computer program receive the flow of control from a generic framework.",source:"@site/docs/patterns/IOC.md",sourceDirName:"patterns",slug:"/patterns/IOC",permalink:"/patterns/docs/patterns/IOC",draft:!1,unlisted:!1,tags:[{label:"IOC",permalink:"/patterns/docs/tags/ioc"},{label:"https://github.com/ignatandrei/patterns",permalink:"/patterns/docs/tags/https-github-com-ignatandrei-patterns"},{label:"behavioral",permalink:"/patterns/docs/tags/behavioral"},{label:"design pattern",permalink:"/patterns/docs/tags/design-pattern"},{label:"DI",permalink:"/patterns/docs/tags/di"}],version:"current",frontMatter:{id:"IOC",title:"IOC",tags:["IOC","https://github.com/ignatandrei/patterns","behavioral","design pattern","IOC","DI"]},sidebar:"tutorialSidebar",previous:{title:"Flyweight",permalink:"/patterns/docs/patterns/Flyweight"},next:{title:"Iterator",permalink:"/patterns/docs/patterns/Iterator"}},c={},l=[{value:"Examples in .NET :",id:"examples-in-net-",level:2},{value:"IOC",id:"ioc",level:3},{value:"DI",id:"di",level:3},{value:"See Source Code for Microsoft implementation of IOC",id:"see-source-code-for-microsoft-implementation-of-ioc",level:2},{value:"Learn More",id:"learn-more",level:2},{value:"Homework",id:"homework",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"pattern--ioc",children:"Pattern:  IOC"}),"\n",(0,t.jsx)(n.p,{children:"Inversion of Control is a principle in software engineering by which the control of objects or portions of a program is transferred to a container or framework. It's a design principle in which custom-written portions of a computer program receive the flow of control from a generic framework."}),"\n",(0,t.jsx)(n.h2,{id:"examples-in-net-",children:"Examples in .NET :"}),"\n",(0,t.jsx)(n.h3,{id:"ioc",children:"IOC"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'showLineNumbers title="IOC example for Pattern IOC"',children:"namespace IOC;\r\npublic class NotificationService\r\n{\r\n    private readonly IMessageService _messageService;\r\n\r\n    public NotificationService(IMessageService messageService)\r\n    {\r\n        _messageService = messageService;\r\n    }\r\n\r\n    public void SendNotification(string message)\r\n    {\r\n        _messageService.SendMessage(message);\r\n    }\r\n}\r\npublic interface IMessageService\r\n{\r\n    void SendMessage(string message);\r\n}\r\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"di",children:"DI"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'showLineNumbers title="DI example for Pattern IOC"',children:'\r\nnamespace IOC;\r\npublic class SMSService : IMessageService\r\n{\r\n    public void SendMessage(string message)\r\n    {\r\n        Console.WriteLine("Sending SMS: " + message);\r\n    }\r\n}\r\n\r\npublic class EmailService : IMessageService\r\n{\r\n    public void SendMessage(string message)\r\n    {\r\n        Console.WriteLine("Sending email: " + message);\r\n    }\r\n}\r\n\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(8479).A+"",children:"Download source"})}),"\n",(0,t.jsx)(n.h2,{id:"see-source-code-for-microsoft-implementation-of-ioc",children:"See Source Code for Microsoft implementation of IOC"}),"\n",(0,t.jsx)("a",{href:"https://source.dot.net/#Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollection.cs",target:"_blank",children:"SourceCode ServiceCollection"}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,t.jsx)("a",{href:"http://www.dofactory.com/net/InversionOfControl-design-pattern",target:"_blank",children:"dofactory"}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("a",{href:"https://github.com/kamranahmedse/design-patterns-for-humans?tab=readme-ov-file#-InversionOfControl",target:"_blank",children:"DPH"}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h2,{id:"homework",children:"Homework"}),"\n",(0,t.jsx)(n.p,{children:"Implement a simple IoC container that will allow you to register and resolve dependencies. The container should be able to resolve dependencies by type and by name."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8479:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/files/ioc-ffc6e035de41c427543b63d1790d0f68.zip"},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);