"use strict";(self.webpackChunkpatterns_site=self.webpackChunkpatterns_site||[]).push([[5900],{8040:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=a(4848),r=a(8453);const o={id:"AbstractFactory",title:"AbstractFactory",tags:["AbstractFactory","https://github.com/ignatandrei/patterns","creational","design pattern","AbstractFactory"]},s="Pattern:  AbstractFactory",c={id:"patterns/AbstractFactory",title:"AbstractFactory",description:"Abstract Factory is a creational design pattern that lets you produce families of related objects without specifying their concrete classes.",source:"@site/docs/patterns/AbstractFactory.md",sourceDirName:"patterns",slug:"/patterns/AbstractFactory",permalink:"/patterns/docs/patterns/AbstractFactory",draft:!1,unlisted:!1,tags:[{label:"AbstractFactory",permalink:"/patterns/docs/tags/abstract-factory"},{label:"https://github.com/ignatandrei/patterns",permalink:"/patterns/docs/tags/https-github-com-ignatandrei-patterns"},{label:"creational",permalink:"/patterns/docs/tags/creational"},{label:"design pattern",permalink:"/patterns/docs/tags/design-pattern"}],version:"current",frontMatter:{id:"AbstractFactory",title:"AbstractFactory",tags:["AbstractFactory","https://github.com/ignatandrei/patterns","creational","design pattern","AbstractFactory"]},sidebar:"tutorialSidebar",previous:{title:"All Patterns",permalink:"/patterns/docs/category/all-patterns"},next:{title:"Adapter",permalink:"/patterns/docs/patterns/Adapter"}},i={},l=[{value:"Example in .NET :",id:"example-in-net-",level:2},{value:"AbstractFactory",id:"abstractfactory",level:3},{value:"See Source Code for Microsoft implementation of AbstractFactory",id:"see-source-code-for-microsoft-implementation-of-abstractfactory",level:2},{value:"Learn More",id:"learn-more",level:2},{value:"Homework",id:"homework",level:2}];function d(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"pattern--abstractfactory",children:"Pattern:  AbstractFactory"}),"\n",(0,n.jsx)(e.p,{children:"Abstract Factory is a creational design pattern that lets you produce families of related objects without specifying their concrete classes."}),"\n",(0,n.jsx)(e.h2,{id:"example-in-net-",children:"Example in .NET :"}),"\n",(0,n.jsx)(e.h3,{id:"abstractfactory",children:"AbstractFactory"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-csharp",metastring:'showLineNumbers title="AbstractFactory example for Pattern AbstractFactory"',children:'\r\nusing Microsoft.Data.SqlClient;\r\nusing System.Data.Common;\r\n\r\nnamespace AbstractFactory;\r\ninternal class AbstractFactoryDemo\r\n{\r\n    public static void Demo()\r\n    {\r\n        //create DbConnection factory by using the instance of SqlConnection\r\n        DbConnection connection = new SqlConnection();\r\n        //create DbCommand instance by using the instance of SqlConnection\r\n        DbCommand command = connection.CreateCommand();\r\n        //really, the DBCommand is a SqlCommand\r\n        SqlCommand? sqlCommand = command as SqlCommand;\r\n        //check if the DbCommand is a SqlCommand\r\n        Console.WriteLine($"DbCommand is SqlCommand: {sqlCommand != null}");\r\n    }\r\n}\r\n\n'})}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:a(9536).A+"",children:"Download source"})}),"\n",(0,n.jsx)(e.h2,{id:"see-source-code-for-microsoft-implementation-of-abstractfactory",children:"See Source Code for Microsoft implementation of AbstractFactory"}),"\n",(0,n.jsx)("a",{href:"https://source.dot.net/#System.Data.Common/System/Data/Common/DbConnection.cs",target:"_blank",children:"SourceCode DbConnection"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(e.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,n.jsx)("a",{href:"https://en.wikipedia.org/wiki/Abstract_factory_pattern",target:"_blank",children:"Wikipedia"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(e.h2,{id:"homework",children:"Homework"}),"\n",(0,n.jsx)(e.p,{children:"Imagine you want to produce loggers. You have a logger that logs to a file and a logger that logs to a console and a Nothing Logger - a logger that does nothing. Implement an abstract factory that will allow you to create a logger factory that will create a logger that logs to a file or to a console or nothing."})]})}function m(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}},9536:(t,e,a)=>{a.d(e,{A:()=>n});const n=a.p+"assets/files/abstractfactory-fd38c9d46826b5eb78e95eeee8ad436a.zip"},8453:(t,e,a)=>{a.d(e,{R:()=>s,x:()=>c});var n=a(6540);const r={},o=n.createContext(r);function s(t){const e=n.useContext(o);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:s(t.components),n.createElement(o.Provider,{value:e},t.children)}}}]);