"use strict";(self.webpackChunkpatterns_site=self.webpackChunkpatterns_site||[]).push([[6960],{681:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var o=r(4848),a=r(8453);const n={id:"Decorator",title:"Decorator",tags:["Decorator","https://github.com/ignatandrei/patterns","behavioral","design pattern","Decorator"]},i="Pattern:  Decorator",s={id:"patterns/Decorator",title:"Decorator",description:"Decorator allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class.",source:"@site/docs/patterns/Decorator.md",sourceDirName:"patterns",slug:"/patterns/Decorator",permalink:"/patterns/docs/patterns/Decorator",draft:!1,unlisted:!1,tags:[{label:"Decorator",permalink:"/patterns/docs/tags/decorator"},{label:"https://github.com/ignatandrei/patterns",permalink:"/patterns/docs/tags/https-github-com-ignatandrei-patterns"},{label:"behavioral",permalink:"/patterns/docs/tags/behavioral"},{label:"design pattern",permalink:"/patterns/docs/tags/design-pattern"}],version:"current",frontMatter:{id:"Decorator",title:"Decorator",tags:["Decorator","https://github.com/ignatandrei/patterns","behavioral","design pattern","Decorator"]},sidebar:"tutorialSidebar",previous:{title:"Chain",permalink:"/patterns/docs/patterns/Chain"},next:{title:"Facade",permalink:"/patterns/docs/patterns/Facade"}},c={},l=[{value:"Purpose of .NET implementation",id:"purpose-of-net-implementation",level:2},{value:"Example in .NET :",id:"example-in-net-",level:2},{value:"Decorator",id:"decorator",level:3},{value:"See Source Code for Microsoft implementation of Decorator",id:"see-source-code-for-microsoft-implementation-of-decorator",level:2},{value:"Learn More",id:"learn-more",level:2},{value:"Homework",id:"homework",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"pattern--decorator",children:"Pattern:  Decorator"}),"\n",(0,o.jsxs)(t.p,{children:["Decorator allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class.    ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(t.h2,{id:"purpose-of-net-implementation",children:"Purpose of .NET implementation"}),"\n",(0,o.jsxs)(t.p,{children:["Stream is a perfect example of the Decorator pattern.    ",(0,o.jsx)("br",{}),"\nImagine you want to write a text to a file, but you want to add some additional functionality(or not, at will) to the stream, such as  compression or encryption..    ",(0,o.jsx)("br",{}),"\nBy using the Decorator pattern, you can easily compose streams with different behaviors to create custom stream objects that meet specific requirements.    ",(0,o.jsx)("br",{}),"\nEach stream class focuses on a single responsibility. FileStream handles file I/O, CryptoStream handles encryption and decryption, and GZipStream handles compression and decompression. This makes the classes easier to understand, test, and maintain..    ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(t.h2,{id:"example-in-net-",children:"Example in .NET :"}),"\n",(0,o.jsx)(t.h3,{id:"decorator",children:"Decorator"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",metastring:'showLineNumbers title="Decorator example for Pattern Decorator"',children:'\nnamespace Decorator;\ninternal class DecoratorDemo\n{\n    public static void Stream_Crypto_Gzip()\n    {\n        string nameFile = "test.txt";\n        if (File.Exists(nameFile))\n            File.Delete(nameFile);\n        byte[] data = ASCIIEncoding.ASCII.GetBytes("Hello World!");\n        // Creates a FileStream (the ConcreteComponent in the Decorator pattern context).\n        using (var stream = new FileStream(nameFile, FileMode.OpenOrCreate, FileAccess.Write))\n        {\n            //stream.Write(data, 0, data.Length);\n            //return;\n            \n            var cryptic = new DESCryptoServiceProvider();\n\n            cryptic.Key = ASCIIEncoding.ASCII.GetBytes("ABCDEFGH");\n            cryptic.IV = ASCIIEncoding.ASCII.GetBytes("ABCDEFGH");\n            // Decorates the FileStream with a CryptoStream (the first Decorator).\n            using (var crStream = new CryptoStream(stream, cryptic.CreateEncryptor(), CryptoStreamMode.Write))\n            {\n                // Further decorates the CryptoStream with a GZipStream (the second Decorator).\n                using (var gz = new GZipStream(crStream, CompressionLevel.Optimal))\n                {\n                    gz.Write(data, 0, data.Length);\n                }\n\n            }\n        }\n    }\n}\n\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(7059).A+"",children:"Download source"})}),"\n",(0,o.jsx)(t.h2,{id:"see-source-code-for-microsoft-implementation-of-decorator",children:"See Source Code for Microsoft implementation of Decorator"}),"\n",(0,o.jsx)("a",{href:"https://source.dot.net/#System.Security.Cryptography/System/Security/Cryptography/CryptoStream.cs",target:"_blank",children:"SourceCode CryptoStream"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)("a",{href:"https://source.dot.net/#System.IO.Compression/System/IO/Compression/GZipStream.cs",target:"_blank",children:"SourceCode GZipStream"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(t.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,o.jsx)("a",{href:"http://wiki.c2.com/?DecoratorPattern",target:"_blank",children:"C2Wiki"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)("a",{href:"http://www.dofactory.com/net/decorator-design-pattern",target:"_blank",children:"dofactory"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)("a",{href:"https://github.com/kamranahmedse/design-patterns-for-humans?tab=readme-ov-file#-decorator",target:"_blank",children:"DPH"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)("a",{href:"https://en.wikipedia.org/wiki/Prototype_pattern",target:"_blank",children:"Wikipedia"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(t.h2,{id:"homework",children:"Homework"}),"\n",(0,o.jsxs)(t.p,{children:["1.Create a LoggingDbConnectionDecorator class that adds logging functionality to a DbConnection object..    ",(0,o.jsx)("br",{}),"\nThis class should log the details of the operations performed on the DbConnection (like opening a connection, closing a connection, executing a command, etc.) to a log file or console..    ",(0,o.jsx)("br",{}),"\n2.Your task is to model a coffee shop ordering system using the Decorator design pattern. The base component will be a coffee, and you will create decorators for adding milk, sugar, and chocolate..    ",(0,o.jsx)("br",{}),"\nThe coffee should be able to display the condiments in a Display method and calculate the price of the coffee with milk, sugar, and chocolate.    ",(0,o.jsx)("br",{})]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},7059:(e,t,r)=>{r.d(t,{A:()=>o});const o=r.p+"assets/files/decorator-093222a3d3b40832bca7fd11ee3e5b22.zip"},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>s});var o=r(6540);const a={},n=o.createContext(a);function i(e){const t=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(n.Provider,{value:t},e.children)}}}]);