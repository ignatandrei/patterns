"use strict";(self.webpackChunkpatterns_site=self.webpackChunkpatterns_site||[]).push([[1642],{3927:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(4848),a=n(8453);const i={id:"Strategy",title:"Strategy",tags:["Strategy","https://github.com/ignatandrei/patterns","behavioral","design pattern","Strategy"]},o="Pattern:  Strategy",s={id:"patterns/Strategy",title:"Strategy",description:"Strategy pattern allows a client to choose from a family of algorithms at runtime.",source:"@site/docs/patterns/Strategy.md",sourceDirName:"patterns",slug:"/patterns/Strategy",permalink:"/patterns/docs/patterns/Strategy",draft:!1,unlisted:!1,tags:[{label:"Strategy",permalink:"/patterns/docs/tags/strategy"},{label:"https://github.com/ignatandrei/patterns",permalink:"/patterns/docs/tags/https-github-com-ignatandrei-patterns"},{label:"behavioral",permalink:"/patterns/docs/tags/behavioral"},{label:"design pattern",permalink:"/patterns/docs/tags/design-pattern"}],version:"current",frontMatter:{id:"Strategy",title:"Strategy",tags:["Strategy","https://github.com/ignatandrei/patterns","behavioral","design pattern","Strategy"]},sidebar:"tutorialSidebar",previous:{title:"Singleton",permalink:"/patterns/docs/patterns/Singleton"},next:{title:"Visitor",permalink:"/patterns/docs/patterns/Visitor"}},l={},c=[{value:"Purpose of .NET implementation",id:"purpose-of-net-implementation",level:2},{value:"Example in .NET :",id:"example-in-net-",level:2},{value:"Strategy",id:"strategy",level:3},{value:"See Source Code for Microsoft implementation of Strategy",id:"see-source-code-for-microsoft-implementation-of-strategy",level:2},{value:"Learn More",id:"learn-more",level:2},{value:"Homework",id:"homework",level:2}];function d(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"pattern--strategy",children:"Pattern:  Strategy"}),"\n",(0,r.jsxs)(e.p,{children:["Strategy pattern allows a client to choose from a family of algorithms at runtime.    ",(0,r.jsx)("br",{}),"\nIt is used when the client expects to have multiple algorithms and wants to choose one of them at runtime.    ",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h2,{id:"purpose-of-net-implementation",children:"Purpose of .NET implementation"}),"\n",(0,r.jsxs)(e.p,{children:["You want to have a function that sort objects based on a specific criteria.    ",(0,r.jsx)("br",{}),"\nYou want to let the developer to provide the sort criteria.    ",(0,r.jsx)("br",{}),"\nYou want also  allow the sorting behavior (the strategy) to be selected at runtime.    ",(0,r.jsx)("br",{}),"\nYou can use the Strategy pattern to let developer define the sorting criteria and the strategy to be used at runtime.    ",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h2,{id:"example-in-net-",children:"Example in .NET :"}),"\n",(0,r.jsx)(e.h3,{id:"strategy",children:"Strategy"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",metastring:'showLineNumbers title="Strategy example for Pattern Strategy"',children:'using System;\nusing System.Collections.Generic;\n\nnamespace Strategy;\ninternal class StrategyDemo\n{\n    public static void SortWithDifferentStrategies()\n    {\n        List<int> al = new ();\n        al.Add(102);\n        al.Add(201);\n        // Strategy 1: Sorts the list in ascending order.\n        al.Sort((x, y) => x.CompareTo(y));\n\n        for (int i = 0; i < al.Count; i++)\n        {\n            Console.WriteLine(al[i]);\n        }\n\n        Console.WriteLine("---------------");\n\n        // Strategy 2: Sorts the list in descending order.\n        al.Sort((y, x) => x.CompareTo(y));\n        for (int i = 0; i < al.Count; i++)\n        {\n            Console.WriteLine(al[i]);\n        }\n        Console.WriteLine("---------------");\n        // Strategy 3: Sorts the list based on the last digit of each number.\n        al.Sort((x, y) => LastDigit(x).CompareTo(LastDigit(y)));\n        for (int i = 0; i < al.Count; i++)\n        {\n            Console.WriteLine(al[i]);\n        }\n\n        var array = al.FindAll(it => it > 10);\n\n\n    }\n\n    static int LastDigit(int x)\n    {\n        return x % 10;\n    }\n\n}\n\n\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(7681).A+"",children:"Download source"})}),"\n",(0,r.jsx)(e.h2,{id:"see-source-code-for-microsoft-implementation-of-strategy",children:"See Source Code for Microsoft implementation of Strategy"}),"\n",(0,r.jsx)("a",{href:"https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Array.cs",target:"_blank",children:"SourceCode Array.Sort"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(e.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,r.jsx)("a",{href:"https://wiki.c2.com/?StrategyPattern",target:"_blank",children:"C2Wiki"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)("a",{href:"http://www.dofactory.com/net/strategy-design-pattern",target:"_blank",children:"dofactory"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)("a",{href:"https://github.com/kamranahmedse/design-patterns-for-humans?tab=readme-ov-file#-strategy",target:"_blank",children:"DPH"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)("a",{href:"https://en.wikipedia.org/wiki/Strategy_pattern",target:"_blank",children:"Wikipedia"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(e.h2,{id:"homework",children:"Homework"}),"\n",(0,r.jsxs)(e.p,{children:["Image you want to serialize classes to XML,JSON and CSV.    ",(0,r.jsx)("br",{}),"\nImplement a strategy that will allow you to choose between XML , JSON and CSV serialization at runtime.    ",(0,r.jsx)("br",{})]})]})}function p(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(d,{...t})}):d(t)}},7681:(t,e,n)=>{n.d(e,{A:()=>r});const r=n.p+"assets/files/strategy-a2c955ee22fba3110d87c29318597170.zip"},8453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>s});var r=n(6540);const a={},i=r.createContext(a);function o(t){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:o(t.components),r.createElement(i.Provider,{value:e},t.children)}}}]);