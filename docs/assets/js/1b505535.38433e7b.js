"use strict";(self.webpackChunkpatterns_site=self.webpackChunkpatterns_site||[]).push([[7587],{6100:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=t(4848),a=t(8453);const s={id:"Observer",title:"Observer",tags:["Observer","https://github.com/ignatandrei/patterns","behavioral","design pattern","Observer"]},o="Pattern:  Observer",i={id:"patterns/Observer",title:"Observer",description:"Observer pattern is a behavioral design pattern that defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.",source:"@site/docs/patterns/Observer.md",sourceDirName:"patterns",slug:"/patterns/Observer",permalink:"/patterns/docs/patterns/Observer",draft:!1,unlisted:!1,tags:[{label:"Observer",permalink:"/patterns/docs/tags/observer"},{label:"https://github.com/ignatandrei/patterns",permalink:"/patterns/docs/tags/https-github-com-ignatandrei-patterns"},{label:"behavioral",permalink:"/patterns/docs/tags/behavioral"},{label:"design pattern",permalink:"/patterns/docs/tags/design-pattern"}],version:"current",frontMatter:{id:"Observer",title:"Observer",tags:["Observer","https://github.com/ignatandrei/patterns","behavioral","design pattern","Observer"]},sidebar:"tutorialSidebar",previous:{title:"NullObject",permalink:"/patterns/docs/patterns/NullObject"},next:{title:"Prototype",permalink:"/patterns/docs/patterns/Prototype"}},l={},p=[{value:"Example in .NET :",id:"example-in-net-",level:2},{value:"Observer",id:"observer",level:3},{value:"See Source Code for Microsoft implementation of Observer",id:"see-source-code-for-microsoft-implementation-of-observer",level:2},{value:"Learn More",id:"learn-more",level:2},{value:"Homework",id:"homework",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"pattern--observer",children:"Pattern:  Observer"}),"\n",(0,n.jsx)(r.p,{children:"Observer pattern is a behavioral design pattern that defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically."}),"\n",(0,n.jsx)(r.h2,{id:"example-in-net-",children:"Example in .NET :"}),"\n",(0,n.jsx)(r.h3,{id:"observer",children:"Observer"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:'showLineNumbers title="Observer example for Pattern Observer"',children:'\r\nusing System.ComponentModel;\r\nusing System.Runtime.CompilerServices;\r\n\r\nnamespace Observer;\r\n\r\n/// <summary>\r\n/// INotifyPropertyChanged is an interface that provides a mechanism for the object to notify clients that a property value has changed.\r\n/// </summary>\r\npublic class Person: INotifyPropertyChanged\r\n{\r\n    private string name=string.Empty;\r\n    public string Name\r\n    {\r\n        get => name;\r\n        set\r\n        {\r\n            if (name == value) return;\r\n            name = value;\r\n            OnPropertyChanged();\r\n        }\r\n    }\r\n\r\n    public event PropertyChangedEventHandler? PropertyChanged;\r\n\r\n    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = "")\r\n    {\r\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\r\n    }\r\n}\r\ninternal class ObserverDemo\r\n{\r\n    public static void Demo()\r\n    {\r\n        Person person = new ();\r\n        //subscribe to the event to observe the changes\r\n        person.PropertyChanged += (sender, args) =>\r\n        {\r\n            var p = sender as Person;\r\n            Console.WriteLine($"Property {args.PropertyName} changed to {p?.Name}");\r\n        };\r\n        person.Name = "Andrei Ignat" ;\r\n    }\r\n}\r\n\n'})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(3412).A+"",children:"Download source"})}),"\n",(0,n.jsx)(r.h2,{id:"see-source-code-for-microsoft-implementation-of-observer",children:"See Source Code for Microsoft implementation of Observer"}),"\n",(0,n.jsx)("a",{href:"https://source.dot.net/#System.ObjectModel/System/ComponentModel/INotifyPropertyChanged.cs",target:"_blank",children:"SourceCode INotifyPropertyChanged"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(r.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,n.jsx)("a",{href:"https://en.wikipedia.org/wiki/Observer_pattern",target:"_blank",children:"Wikipedia"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(r.h2,{id:"homework",children:"Homework"}),"\n",(0,n.jsx)(r.p,{children:"Imagine you have a logger that logs to a file and to a console. Implement an observable logger that will allow you to subscribe to the logger and to be notified when the logger logs a message."})]})}function c(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},3412:(e,r,t)=>{t.d(r,{A:()=>n});const n=t.p+"assets/files/observer-1b530e405e53b204a4ac7854375f08b9.zip"},8453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>i});var n=t(6540);const a={},s=n.createContext(a);function o(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);