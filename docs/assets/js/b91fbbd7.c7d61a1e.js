"use strict";(self.webpackChunkpatterns_site=self.webpackChunkpatterns_site||[]).push([[5658],{7870:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=n(4848),r=n(8453);const a={id:"Visitor",title:"Visitor",tags:["Visitor","https://github.com/ignatandrei/patterns","behavioral","design pattern","Visitor"]},s="Pattern:  Visitor",o={id:"patterns/Visitor",title:"Visitor",description:"Visitor pattern is a way of separating an algorithm from an object structure on which it operates.",source:"@site/docs/patterns/Visitor.md",sourceDirName:"patterns",slug:"/patterns/Visitor",permalink:"/patterns/docs/patterns/Visitor",draft:!1,unlisted:!1,tags:[{label:"Visitor",permalink:"/patterns/docs/tags/visitor"},{label:"https://github.com/ignatandrei/patterns",permalink:"/patterns/docs/tags/https-github-com-ignatandrei-patterns"},{label:"behavioral",permalink:"/patterns/docs/tags/behavioral"},{label:"design pattern",permalink:"/patterns/docs/tags/design-pattern"}],version:"current",frontMatter:{id:"Visitor",title:"Visitor",tags:["Visitor","https://github.com/ignatandrei/patterns","behavioral","design pattern","Visitor"]},sidebar:"tutorialSidebar",previous:{title:"Strategy",permalink:"/patterns/docs/patterns/Strategy"},next:{title:"DocusaurusTutorial",permalink:"/patterns/docs/category/docusaurustutorial"}},l={},c=[{value:"Purpose of .NET implementation",id:"purpose-of-net-implementation",level:2},{value:"Example in .NET :",id:"example-in-net-",level:2},{value:"Visitor",id:"visitor",level:3},{value:"See Source Code for Microsoft implementation of Visitor",id:"see-source-code-for-microsoft-implementation-of-visitor",level:2},{value:"Learn More",id:"learn-more",level:2},{value:"Homework",id:"homework",level:2}];function d(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"pattern--visitor",children:"Pattern:  Visitor"}),"\n",(0,i.jsxs)(e.p,{children:["Visitor pattern is a way of separating an algorithm from an object structure on which it operates.    ",(0,i.jsx)("br",{}),"\nA practical result of this separation is the ability to add new operations to existing object structures without modifying the structures.    ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(e.h2,{id:"purpose-of-net-implementation",children:"Purpose of .NET implementation"}),"\n",(0,i.jsx)(e.h2,{id:"example-in-net-",children:"Example in .NET :"}),"\n",(0,i.jsx)(e.h3,{id:"visitor",children:"Visitor"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",metastring:'showLineNumbers title="Visitor example for Pattern Visitor"',children:'using Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\n\nnamespace Visitor;\ninternal class VisitorDemo\n{\n    public static void VisitMethods()\n    {\n        var Code = @"""\nusing System;\nnamespace Test1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n              var dt=DateTime.Now;\n\t\t\t  Console.WriteLine(dt);\n        }\n     }\n}\n\n""";\n        var tree = CSharpSyntaxTree.ParseText(Code);\n\n        var node = tree.GetRoot();\n\n        MethodVisiting LG = new MethodVisiting();\n        //start visiting\n        var sn = LG.Visit(node);\n\n    }\n}\npublic class MethodVisiting : CSharpSyntaxRewriter\n{\n    public override SyntaxNode? VisitMethodDeclaration(MethodDeclarationSyntax node)\n    {\n        if (node.Body == null || node.Body.Statements.Count == 0)\n            return base.VisitMethodDeclaration(node);\n\n        var parent = node.Parent as ClassDeclarationSyntax;\n        \n        if (parent == null)\n            return base.VisitMethodDeclaration(node);\n\n        var nameMethod = node.Identifier.Text;\n        var nameClass = parent.Identifier.Text;\n        Console.WriteLine($"visiting {nameMethod} from {nameClass}");\n\n        return base.VisitMethodDeclaration(node);\n\n    }\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(278).A+"",children:"Download source"})}),"\n",(0,i.jsx)(e.h2,{id:"see-source-code-for-microsoft-implementation-of-visitor",children:"See Source Code for Microsoft implementation of Visitor"}),"\n",(0,i.jsx)("a",{href:"https://github.com/dotnet/roslyn/blob/cecdb802007a49e346215c0afdce354d6c111112/src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxRewriter.cs#L17",target:"_blank",children:"SourceCode CSharpSyntaxRewriter"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(e.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,i.jsx)("a",{href:"http://wiki.c2.com/?VisitorPattern",target:"_blank",children:"C2Wiki"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)("a",{href:"https://wiki.c2.com/?VisitorPattern",target:"_blank",children:"C2Wiki"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)("a",{href:"http://www.dofactory.com/net/visitor-design-pattern",target:"_blank",children:"dofactory"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)("a",{href:"https://github.com/kamranahmedse/design-patterns-for-humans?tab=readme-ov-file#-visitor",target:"_blank",children:"DPH"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)("a",{href:"https://en.wikipedia.org/wiki/Visitor_pattern",target:"_blank",children:"Wikipedia"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(e.h2,{id:"homework",children:"Homework"}),"\n",(0,i.jsxs)(e.p,{children:["Implement a visitor that will allow you to calculate the total price of a shopping cart.    ",(0,i.jsx)("br",{}),"\nThe shopping cart should contain items with a price and a quantity.    ",(0,i.jsx)("br",{}),"\nVisit every item and make the sum.    ",(0,i.jsx)("br",{})]})]})}function p(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}},278:(t,e,n)=>{n.d(e,{A:()=>i});const i=n.p+"assets/files/visitor-836a3f57eb3fc84dbbc537bb7c80f560.zip"},8453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>o});var i=n(6540);const r={},a=i.createContext(r);function s(t){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:s(t.components),i.createElement(a.Provider,{value:e},t.children)}}}]);