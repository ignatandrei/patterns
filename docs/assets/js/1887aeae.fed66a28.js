"use strict";(self.webpackChunkpatterns_site=self.webpackChunkpatterns_site||[]).push([[1255],{1897:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=t(4848),r=t(8453);const o={id:"FluentInterface",title:"FluentInterface",tags:["FluentInterface","https://github.com/ignatandrei/patterns","behavioral","design pattern","FluentInterface"]},i="Pattern:  FluentInterface",s={id:"patterns/FluentInterface",title:"FluentInterface",description:"Fluent interface allows you do have method chaining.",source:"@site/docs/patterns/FluentInterface.md",sourceDirName:"patterns",slug:"/patterns/FluentInterface",permalink:"/patterns/docs/patterns/FluentInterface",draft:!1,unlisted:!1,tags:[{label:"FluentInterface",permalink:"/patterns/docs/tags/fluent-interface"},{label:"https://github.com/ignatandrei/patterns",permalink:"/patterns/docs/tags/https-github-com-ignatandrei-patterns"},{label:"behavioral",permalink:"/patterns/docs/tags/behavioral"},{label:"design pattern",permalink:"/patterns/docs/tags/design-pattern"}],version:"current",frontMatter:{id:"FluentInterface",title:"FluentInterface",tags:["FluentInterface","https://github.com/ignatandrei/patterns","behavioral","design pattern","FluentInterface"]},sidebar:"tutorialSidebar",previous:{title:"Factory",permalink:"/patterns/docs/patterns/Factory"},next:{title:"Flyweight",permalink:"/patterns/docs/patterns/Flyweight"}},c={},l=[{value:"Purpose of .NET implementation",id:"purpose-of-net-implementation",level:2},{value:"Example in .NET :",id:"example-in-net-",level:2},{value:"FluentInterface",id:"fluentinterface",level:3},{value:"See Source Code for Microsoft implementation of FluentInterface",id:"see-source-code-for-microsoft-implementation-of-fluentinterface",level:2},{value:"Learn More",id:"learn-more",level:2},{value:"Homework",id:"homework",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"pattern--fluentinterface",children:"Pattern:  FluentInterface"}),"\n",(0,a.jsxs)(n.p,{children:["Fluent interface allows you do have method chaining.    ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.h2,{id:"purpose-of-net-implementation",children:"Purpose of .NET implementation"}),"\n",(0,a.jsxs)(n.p,{children:["The methods of a service collection instance is called multiple times( e.g. for .AddSingleton).    ",(0,a.jsx)("br",{}),"\nYou want to ensure that the programmer can write code that is easy to write, easy to read, and easy to maintain.    ",(0,a.jsx)("br",{}),"\nSo from each method you return the instance of the service collection, so you can chain the methods.    ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.h2,{id:"example-in-net-",children:"Example in .NET :"}),"\n",(0,a.jsx)(n.h3,{id:"fluentinterface",children:"FluentInterface"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:'showLineNumbers title="FluentInterface example for Pattern FluentInterface"',children:"\nusing Microsoft.Extensions.DependencyInjection;\nusing System.Data;\nusing System.Data.Common;\n\nnamespace FluentInterface;\ninternal static class FluentInterfaceDemo\n{\n    public static ServiceCollection AddServices(this ServiceCollection sc)\n    {\n        //just for demo, does not make sense\n        sc\n            .AddSingleton<IComparable>((sp) =>\n            {\n                //does not matter\n                return 1970;\n            })\n            .AddSingleton<IComparable<Int32>>((sp) =>\n            {\n                //does not matter\n                return 16;\n            });\n        //this way you can chain the calls , making a fluent interface \n        return sc;\n\n\n    }\n}\n\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(4339).A+"",children:"Download source"})}),"\n",(0,a.jsx)(n.h2,{id:"see-source-code-for-microsoft-implementation-of-fluentinterface",children:"See Source Code for Microsoft implementation of FluentInterface"}),"\n",(0,a.jsx)("a",{href:"https://source.dot.net/#Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs",target:"_blank",children:"SourceCode Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,a.jsx)("a",{href:"https://en.wikipedia.org/wiki/Software_design_pattern",target:"_blank",children:"Wikipedia"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"homework",children:"Homework"}),"\n",(0,a.jsxs)(n.p,{children:["Implement a class person that you can see the first name and last name as fluent interface.    ",(0,a.jsx)("br",{})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},4339:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/files/fluentinterface-1771625cb1a37ae3b2d4d82576dbd712.zip"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var a=t(6540);const r={},o=a.createContext(r);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);