"use strict";(self.webpackChunkpatterns_site=self.webpackChunkpatterns_site||[]).push([[4176],{9803:t=>{t.exports=JSON.parse('{"label":"creational","permalink":"/patterns/docs/tags/creational","allTagsPath":"/patterns/docs/tags","count":3,"items":[{"id":"patterns/Builder","title":"Builder","description":"The intent of the Builder design pattern is to separate the construction of a complex object from its representation","permalink":"/patterns/docs/patterns/Builder"},{"id":"patterns/Factory","title":"Factory","description":"A factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be new","permalink":"/patterns/docs/patterns/Factory"},{"id":"patterns/Prototype","title":"Prototype","description":"It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects","permalink":"/patterns/docs/patterns/Prototype"}],"unlisted":false}')}}]);