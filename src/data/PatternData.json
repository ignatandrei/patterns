[
  {
    "Id": 1,
    "Stage":"done",
    "Title": "Builder",
    "Description":"The intent of the Builder design pattern is to separate the construction of a complex object from its representation",
    "LinkWikipedia":"https://en.wikipedia.org/wiki/Builder_pattern",
    "DemoFileCsproj":"Builder.csproj",
    "ClassNames":"UriBuilder,SqlConnectionStringBuilder",
    "Homework":"Imagine that you have a logger that logs to a file and to a console. Implement a builder that will allow you to create a logger with different configurations. For example, you can set the log level, the log format, and the log destination.",
    "Tags":"creational,design pattern"    

  },
  {
    "Id": 2,
    "Stage":"done",
    "Title": "NullObject",
    "Description":"Instead of returning null , use an object which implements the expected interface, but whose method body is empty.",
    "LinkWikipedia":"https://en.wikipedia.org/wiki/Null_object_pattern",
    "DemoFileCsproj":"NullObject.csproj",
    "ClassNames":"EmptyFolder,NullLogger",
    "Homework":"When retrieving data( e.g. a Person with ID =-1 ) from a database , return a NullObject instead of null. How you will verify that the object is a NullObject?",
    "Tags":"behavioral,design pattern"    

  },
  {
    "Id": 3,
    "Stage":"done",
    "Title": "Iterator",    
    "Description":"Iterator design pattern allows to traverse a container and access the container's elements.",
    "LinkWikipedia":"https://en.wikipedia.org/wiki/iterator_pattern",
    "DemoFileCsproj":"Iterator.csproj",
    "Homework":"With the Yield keyword implement a function that return an IEnumerable of generic int that will return the first 10 numbers of the Fibonacci sequence",
    "ClassNames":"DirectoryEnumerable",
    "Tags":"behavioral,design pattern"
  },
  {
    "Id": 4,
    "Stage":"done",
    "Title": "Adapter", 
    "Description":"Adapter design pattern allows the interface of an existing class to be used as another interface.It is often used to make existing classes work with others without modifying their source code.",
    "LinkWikipedia":"https://en.wikipedia.org/wiki/Adapter_pattern",
    "DemoFileCsproj":"Adaptor.csproj",
    "ClassNames":"SQLiteDataAdapter,EncodingAdapter",
    "Homework":"iPhone 7 does not have a headphone jack. Implement an adapter that will allow you to use your old headphones , that have jack, with the iPhone 7.",
    "Tags":"structural,design pattern"
  }
  ,
  {
    "Id": 5,
    "Stage":"done",
    "Title": "Prototype",
    "Description":"It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects",
    "LinkWikipedia":"https://en.wikipedia.org/wiki/Prototype_pattern",   
    "DemoFileCsproj":"Prototype.csproj",
    "ClassNames":"ICloneable",
    "Homework":"Imagine that you have a cow farm and you want to create a new cow. Implement a prototype that will allow you to clone a cow. The cow should have a name and a weight",
    "Tags":"creational,design pattern"
  } 
  
  ,
  {
    "Id": 6,
    "Stage":"done",
    "Title": "factory",    
    "Description":"A factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be new",
    "LinkWikipedia":"https://en.wikipedia.org/wiki/Factory_pattern",   
    "DemoFileCsproj":"Factory.csproj",
    "ClassNames":"Factory",
    "Homework":"having multiple types of drinks( water, tea, coffee) with an IDrink interface  create a factory method ( with a parameter ) to create a drink  ",
    "Tags":"creational,design pattern"
  },
  {
    "Id": 7,
    "Stage":"notdone",
    "Title": "facade",
    "Description":"Facade is is an object that provides a simplified interface to a larger body of code, such as a class library.",
    "LinkWikipedia":"https://en.wikipedia.org/wiki/Facade_pattern",
    "DemoFileCsproj":"Facade.csproj",
    "ClassNames":"Facade",
    "Homework":"",
    "Tags":"structural,design pattern"    
  }
  ,
  {
    "Id": 8,
    "Stage":"done",
    "Title": "decorator",    
    "Description":"Decorator allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class.",
    "LinkWikipedia":"https://en.wikipedia.org/wiki/Prototype_pattern",   
    "DemoFileCsproj":"Decorator.csproj",
    "ClassNames":"Decorator",
    "Homework":"1. Add a logging to DBConnection . 2. Use by decorating a coffee with milk, sugar, and chocolate (and maybe other condiments). The coffee should be able to display the condiments in a Display method and calculate the price of the coffee with milk, sugar, and chocolate.",
    "Tags":"behavioral,design pattern"
  }
  ,
  {
    "Id": 9,
    "Stage":"notdone",
    "Title": "chain"    
  },
  {
    "Id": 10,
    "Stage":"notdone",
    "Title": "singleton"    
  },
  {
    "Id": 11,
    "Stage":"done",
    "Title": "strategy",    
    "Description":"Strategy pattern allows a client to choose from a family of algorithms at runtime. It is used when the client expects to have multiple algorithms and wants to choose one of them at runtime.",
    "LinkWikipedia":"https://en.wikipedia.org/wiki/Strategy_pattern",   
    "DemoFileCsproj":"Strategy.csproj",
    "ClassNames":"Strategy",
    "Homework":"Image you want to serialize classes to XML,JSON and CSV . Implement a strategy that will allow you to choose between XML , JSON and CSV serialization at runtime.",
    "Tags":"behavioral, design pattern"
  }
  ,
  {
    "Id": 12,
    "Stage":"notdone",
    "Title": "visitor"    
  },
  {
    "Id": 13,
    "Stage":"notdone",
    "Title": "InversionOfControl"    
  }


]