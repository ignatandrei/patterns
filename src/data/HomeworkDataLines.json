[
  {
    "Id": 1,
    "Line1": "Imagine that you have a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " Implement a builder that will allow you to create a logger with different configurations",
    "Line3": " For example, you can set the log level, the log format, and the log destination",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 2,
    "Line1": "When retrieving data( e",
    "Line10": "",
    "Line2": "g",
    "Line3": " a Person with ID =-1 ) from a database , return a NullObject instead of null",
    "Line4": " How you will verify that the object is a NullObject?",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 3,
    "Line1": "With the Yield keyword implement a function that return an IEnumerable of generic int that will return the first 10 numbers of the Fibonacci sequence",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 4,
    "Line1": "iPhone 7 does not have a headphone jack",
    "Line10": "",
    "Line2": " Implement an adapter that will allow you to use your old headphones , that have jack, with the iPhone 7",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 5,
    "Line1": "Imagine that you have a cow farm and you want to create a new cow",
    "Line10": "",
    "Line2": " Implement a prototype that will allow you to clone a cow",
    "Line3": " The cow should have a name and a weight",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 6,
    "Line1": "having multiple types of drinks( water, tea, coffee) with an IDrink interface  create a factory method ( with a parameter ) to create a drink  ",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 7,
    "Line1": "Implement a Facade that will allow you to display a question in a MessageBox with a single method call in a console application and return yes/no as a result",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 8,
    "Line1": "1",
    "Line10": "",
    "Line2": " Add a logging to DBConnection ",
    "Line3": " 2",
    "Line4": " Use by decorating a coffee with milk, sugar, and chocolate (and maybe other condiments)",
    "Line5": " The coffee should be able to display the condiments in a Display method and calculate the price of the coffee with milk, sugar, and chocolate",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 9,
    "Line1": "Implement a middleware in ASP",
    "Line10": "",
    "Line2": "NET Core that intercepts the exception and logs it to the database",
    "Line3": " The middleware should be able to pass the exception to the next middleware in the chain",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 10,
    "Line1": "Implement a singleton that will allow you to create a single instance of a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 11,
    "Line1": "Image you want to serialize classes to XML,JSON and CSV ",
    "Line10": "",
    "Line2": " Implement a strategy that will allow you to choose between XML , JSON and CSV serialization at runtime",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 12,
    "Line1": "Implement a visitor that will allow you to calculate the total price of a shopping cart",
    "Line10": "",
    "Line2": " The shopping cart should contain items with a price and a quantity",
    "Line3": "Visit every item and make the sum",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 13,
    "Line1": "Implement a simple IoC container that will allow you to register and resolve dependencies",
    "Line10": "",
    "Line2": " The container should be able to resolve dependencies by type and by name",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 14,
    "Line1": "Implement a lazy initialization of a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " The logger should be created only when it is needed",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 15,
    "Line1": "Implement a class person that you can see the first name and last name as fluent interface",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 16,
    "Line1": "Make an exchange rate system",
    "Line10": "",
    "Line2": " The symbol and names of the currency are the same for all the currencies",
    "Line3": " The exchange rate is different for each currency",
    "Line4": " Implement a flyweight that will allow you to create a currency with a symbol and a name and to get the exchange rate for the currency",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 17,
    "Line1": "Imagine you want to produce loggers",
    "Line10": "",
    "Line2": " You have a logger that logs to a file and a logger that logs to a console and a Nothing Logger - a logger that does nothing",
    "Line3": " Implement an abstract factory that will allow you to create a logger factory that will create a logger that logs to a file or to a console or nothing",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 18,
    "Line1": "Imagine you have a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " Implement an observable logger that will allow you to subscribe to the logger and to be notified when the logger logs a message",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 19,
    "Line1": "Imagine that you have a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " Implement a builder that will allow you to create a logger with different configurations",
    "Line3": " For example, you can set the log level, the log format, and the log destination",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 20,
    "Line1": "When retrieving data( e",
    "Line10": "",
    "Line2": "g",
    "Line3": " a Person with ID =-1 ) from a database , return a NullObject instead of null",
    "Line4": " How you will verify that the object is a NullObject?",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 21,
    "Line1": "With the Yield keyword implement a function that return an IEnumerable of generic int that will return the first 10 numbers of the Fibonacci sequence",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 22,
    "Line1": "iPhone 7 does not have a headphone jack",
    "Line10": "",
    "Line2": " Implement an adapter that will allow you to use your old headphones , that have jack, with the iPhone 7",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 23,
    "Line1": "Imagine that you have a cow farm and you want to create a new cow",
    "Line10": "",
    "Line2": " Implement a prototype that will allow you to clone a cow",
    "Line3": " The cow should have a name and a weight",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 24,
    "Line1": "having multiple types of drinks( water, tea, coffee) with an IDrink interface  create a factory method ( with a parameter ) to create a drink  ",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 25,
    "Line1": "Implement a Facade that will allow you to display a question in a MessageBox with a single method call in a console application and return yes/no as a result",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 26,
    "Line1": "1",
    "Line10": "",
    "Line2": " Add a logging to DBConnection ",
    "Line3": " 2",
    "Line4": " Use by decorating a coffee with milk, sugar, and chocolate (and maybe other condiments)",
    "Line5": " The coffee should be able to display the condiments in a Display method and calculate the price of the coffee with milk, sugar, and chocolate",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 27,
    "Line1": "Implement a middleware in ASP",
    "Line10": "",
    "Line2": "NET Core that intercepts the exception and logs it to the database",
    "Line3": " The middleware should be able to pass the exception to the next middleware in the chain",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 28,
    "Line1": "Implement a singleton that will allow you to create a single instance of a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 29,
    "Line1": "Image you want to serialize classes to XML,JSON and CSV ",
    "Line10": "",
    "Line2": " Implement a strategy that will allow you to choose between XML , JSON and CSV serialization at runtime",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 30,
    "Line1": "Implement a visitor that will allow you to calculate the total price of a shopping cart",
    "Line10": "",
    "Line2": " The shopping cart should contain items with a price and a quantity",
    "Line3": "Visit every item and make the sum",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 31,
    "Line1": "Implement a simple IoC container that will allow you to register and resolve dependencies",
    "Line10": "",
    "Line2": " The container should be able to resolve dependencies by type and by name",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 32,
    "Line1": "Implement a lazy initialization of a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " The logger should be created only when it is needed",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 33,
    "Line1": "Implement a class person that you can see the first name and last name as fluent interface",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 34,
    "Line1": "Make an exchange rate system",
    "Line10": "",
    "Line2": " The symbol and names of the currency are the same for all the currencies",
    "Line3": " The exchange rate is different for each currency",
    "Line4": " Implement a flyweight that will allow you to create a currency with a symbol and a name and to get the exchange rate for the currency",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 35,
    "Line1": "Imagine you want to produce loggers",
    "Line10": "",
    "Line2": " You have a logger that logs to a file and a logger that logs to a console and a Nothing Logger - a logger that does nothing",
    "Line3": " Implement an abstract factory that will allow you to create a logger factory that will create a logger that logs to a file or to a console or nothing",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 36,
    "Line1": "Imagine you have a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " Implement an observable logger that will allow you to subscribe to the logger and to be notified when the logger logs a message",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 37,
    "Line1": "Imagine that you have a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " Implement a builder that will allow you to create a logger with different configurations",
    "Line3": " For example, you can set the log level, the log format, and the log destination",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 38,
    "Line1": "When retrieving data( e",
    "Line10": "",
    "Line2": "g",
    "Line3": " a Person with ID =-1 ) from a database , return a NullObject instead of null",
    "Line4": " How you will verify that the object is a NullObject?",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 39,
    "Line1": "With the Yield keyword implement a function that return an IEnumerable of generic int that will return the first 10 numbers of the Fibonacci sequence",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 40,
    "Line1": "iPhone 7 does not have a headphone jack",
    "Line10": "",
    "Line2": " Implement an adapter that will allow you to use your old headphones , that have jack, with the iPhone 7",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 41,
    "Line1": "Imagine that you have a cow farm and you want to create a new cow",
    "Line10": "",
    "Line2": " Implement a prototype that will allow you to clone a cow",
    "Line3": " The cow should have a name and a weight",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 42,
    "Line1": "having multiple types of drinks( water, tea, coffee) with an IDrink interface  create a factory method ( with a parameter ) to create a drink  ",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 43,
    "Line1": "Implement a Facade that will allow you to display a question in a MessageBox with a single method call in a console application and return yes/no as a result",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 44,
    "Line1": "1",
    "Line10": "",
    "Line2": " Add a logging to DBConnection ",
    "Line3": " 2",
    "Line4": " Use by decorating a coffee with milk, sugar, and chocolate (and maybe other condiments)",
    "Line5": " The coffee should be able to display the condiments in a Display method and calculate the price of the coffee with milk, sugar, and chocolate",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 45,
    "Line1": "Implement a middleware in ASP",
    "Line10": "",
    "Line2": "NET Core that intercepts the exception and logs it to the database",
    "Line3": " The middleware should be able to pass the exception to the next middleware in the chain",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 46,
    "Line1": "Implement a singleton that will allow you to create a single instance of a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 47,
    "Line1": "Image you want to serialize classes to XML,JSON and CSV ",
    "Line10": "",
    "Line2": " Implement a strategy that will allow you to choose between XML , JSON and CSV serialization at runtime",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 48,
    "Line1": "Implement a visitor that will allow you to calculate the total price of a shopping cart",
    "Line10": "",
    "Line2": " The shopping cart should contain items with a price and a quantity",
    "Line3": "Visit every item and make the sum",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 49,
    "Line1": "Implement a simple IoC container that will allow you to register and resolve dependencies",
    "Line10": "",
    "Line2": " The container should be able to resolve dependencies by type and by name",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 50,
    "Line1": "Implement a lazy initialization of a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " The logger should be created only when it is needed",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 51,
    "Line1": "Implement a class person that you can see the first name and last name as fluent interface",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 52,
    "Line1": "Make an exchange rate system",
    "Line10": "",
    "Line2": " The symbol and names of the currency are the same for all the currencies",
    "Line3": " The exchange rate is different for each currency",
    "Line4": " Implement a flyweight that will allow you to create a currency with a symbol and a name and to get the exchange rate for the currency",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 53,
    "Line1": "Imagine you want to produce loggers",
    "Line10": "",
    "Line2": " You have a logger that logs to a file and a logger that logs to a console and a Nothing Logger - a logger that does nothing",
    "Line3": " Implement an abstract factory that will allow you to create a logger factory that will create a logger that logs to a file or to a console or nothing",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 54,
    "Line1": "Imagine you have a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " Implement an observable logger that will allow you to subscribe to the logger and to be notified when the logger logs a message",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 55,
    "Line1": "Imagine that you have a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " Implement a builder that will allow you to create a logger with different configurations",
    "Line3": " For example, you can set the log level, the log format, and the log destination",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 56,
    "Line1": "When retrieving data( e",
    "Line10": "",
    "Line2": "g",
    "Line3": " a Person with ID =-1 ) from a database , return a NullObject instead of null",
    "Line4": " How you will verify that the object is a NullObject?",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 57,
    "Line1": "With the Yield keyword implement a function that return an IEnumerable of generic int that will return the first 10 numbers of the Fibonacci sequence",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 58,
    "Line1": "iPhone 7 does not have a headphone jack",
    "Line10": "",
    "Line2": " Implement an adapter that will allow you to use your old headphones , that have jack, with the iPhone 7",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 59,
    "Line1": "Imagine that you have a cow farm and you want to create a new cow",
    "Line10": "",
    "Line2": " Implement a prototype that will allow you to clone a cow",
    "Line3": " The cow should have a name and a weight",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 60,
    "Line1": "having multiple types of drinks( water, tea, coffee) with an IDrink interface  create a factory method ( with a parameter ) to create a drink  ",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 61,
    "Line1": "Implement a Facade that will allow you to display a question in a MessageBox with a single method call in a console application and return yes/no as a result",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 62,
    "Line1": "1",
    "Line10": "",
    "Line2": " Add a logging to DBConnection ",
    "Line3": " 2",
    "Line4": " Use by decorating a coffee with milk, sugar, and chocolate (and maybe other condiments)",
    "Line5": " The coffee should be able to display the condiments in a Display method and calculate the price of the coffee with milk, sugar, and chocolate",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 63,
    "Line1": "Implement a middleware in ASP",
    "Line10": "",
    "Line2": "NET Core that intercepts the exception and logs it to the database",
    "Line3": " The middleware should be able to pass the exception to the next middleware in the chain",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 64,
    "Line1": "Implement a singleton that will allow you to create a single instance of a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 65,
    "Line1": "Image you want to serialize classes to XML,JSON and CSV ",
    "Line10": "",
    "Line2": " Implement a strategy that will allow you to choose between XML , JSON and CSV serialization at runtime",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 66,
    "Line1": "Implement a visitor that will allow you to calculate the total price of a shopping cart",
    "Line10": "",
    "Line2": " The shopping cart should contain items with a price and a quantity",
    "Line3": "Visit every item and make the sum",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 67,
    "Line1": "Implement a simple IoC container that will allow you to register and resolve dependencies",
    "Line10": "",
    "Line2": " The container should be able to resolve dependencies by type and by name",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 68,
    "Line1": "Implement a lazy initialization of a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " The logger should be created only when it is needed",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 69,
    "Line1": "Implement a class person that you can see the first name and last name as fluent interface",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 70,
    "Line1": "Make an exchange rate system",
    "Line10": "",
    "Line2": " The symbol and names of the currency are the same for all the currencies",
    "Line3": " The exchange rate is different for each currency",
    "Line4": " Implement a flyweight that will allow you to create a currency with a symbol and a name and to get the exchange rate for the currency",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 71,
    "Line1": "Imagine you want to produce loggers",
    "Line10": "",
    "Line2": " You have a logger that logs to a file and a logger that logs to a console and a Nothing Logger - a logger that does nothing",
    "Line3": " Implement an abstract factory that will allow you to create a logger factory that will create a logger that logs to a file or to a console or nothing",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 72,
    "Line1": "Imagine you have a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " Implement an observable logger that will allow you to subscribe to the logger and to be notified when the logger logs a message",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 73,
    "Line1": "Imagine that you have a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " Implement a builder that will allow you to create a logger with different configurations",
    "Line3": " For example, you can set the log level, the log format, and the log destination",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 74,
    "Line1": "When retrieving data( e",
    "Line10": "",
    "Line2": "g",
    "Line3": " a Person with ID =-1 ) from a database , return a NullObject instead of null",
    "Line4": " How you will verify that the object is a NullObject?",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 75,
    "Line1": "With the Yield keyword implement a function that return an IEnumerable of generic int that will return the first 10 numbers of the Fibonacci sequence",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 76,
    "Line1": "iPhone 7 does not have a headphone jack",
    "Line10": "",
    "Line2": " Implement an adapter that will allow you to use your old headphones , that have jack, with the iPhone 7",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 77,
    "Line1": "Imagine that you have a cow farm and you want to create a new cow",
    "Line10": "",
    "Line2": " Implement a prototype that will allow you to clone a cow",
    "Line3": " The cow should have a name and a weight",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 78,
    "Line1": "having multiple types of drinks( water, tea, coffee) with an IDrink interface  create a factory method ( with a parameter ) to create a drink  ",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 79,
    "Line1": "Implement a Facade that will allow you to display a question in a MessageBox with a single method call in a console application and return yes/no as a result",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 80,
    "Line1": "1",
    "Line10": "",
    "Line2": " Add a logging to DBConnection ",
    "Line3": " 2",
    "Line4": " Use by decorating a coffee with milk, sugar, and chocolate (and maybe other condiments)",
    "Line5": " The coffee should be able to display the condiments in a Display method and calculate the price of the coffee with milk, sugar, and chocolate",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 81,
    "Line1": "Implement a middleware in ASP",
    "Line10": "",
    "Line2": "NET Core that intercepts the exception and logs it to the database",
    "Line3": " The middleware should be able to pass the exception to the next middleware in the chain",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 82,
    "Line1": "Implement a singleton that will allow you to create a single instance of a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 83,
    "Line1": "Image you want to serialize classes to XML,JSON and CSV ",
    "Line10": "",
    "Line2": " Implement a strategy that will allow you to choose between XML , JSON and CSV serialization at runtime",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 84,
    "Line1": "Implement a visitor that will allow you to calculate the total price of a shopping cart",
    "Line10": "",
    "Line2": " The shopping cart should contain items with a price and a quantity",
    "Line3": "Visit every item and make the sum",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 85,
    "Line1": "Implement a simple IoC container that will allow you to register and resolve dependencies",
    "Line10": "",
    "Line2": " The container should be able to resolve dependencies by type and by name",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 86,
    "Line1": "Implement a lazy initialization of a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " The logger should be created only when it is needed",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 87,
    "Line1": "Implement a class person that you can see the first name and last name as fluent interface",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 88,
    "Line1": "Make an exchange rate system",
    "Line10": "",
    "Line2": " The symbol and names of the currency are the same for all the currencies",
    "Line3": " The exchange rate is different for each currency",
    "Line4": " Implement a flyweight that will allow you to create a currency with a symbol and a name and to get the exchange rate for the currency",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 89,
    "Line1": "Imagine you want to produce loggers",
    "Line10": "",
    "Line2": " You have a logger that logs to a file and a logger that logs to a console and a Nothing Logger - a logger that does nothing",
    "Line3": " Implement an abstract factory that will allow you to create a logger factory that will create a logger that logs to a file or to a console or nothing",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 90,
    "Line1": "Imagine you have a logger that logs to a file and to a console",
    "Line10": "",
    "Line2": " Implement an observable logger that will allow you to subscribe to the logger and to be notified when the logger logs a message",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  }
]