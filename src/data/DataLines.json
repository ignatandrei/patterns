[
  {
    "Id": 1,
    "Line1": "The intent of the Builder design pattern is to separate the construction of a complex object from its representation",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 2,
    "Line1": "Instead of returning null , use an object which implements the expected interface, but whose method body is empty",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 3,
    "Line1": "Iterator design pattern allows to traverse a container and access the container\u0027s elements",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 4,
    "Line1": "Adapter design pattern allows the interface of an existing class to be used as another interface",
    "Line10": "",
    "Line2": "It is often used to make existing classes work with others without modifying their source code",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 5,
    "Line1": "It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 6,
    "Line1": "A factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be new",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 7,
    "Line1": "Facade is is an object that provides a simplified interface to a larger body of code, such as a class library",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 8,
    "Line1": "Decorator allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 9,
    "Line1": "Chain of responsibility pattern allows an object to send a command without knowing what object will receive and handle it",
    "Line10": "",
    "Line2": " Chain the receiving objects and pass the request along the chain until an object handles it",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 10,
    "Line1": "Singleton pattern restricts the instantiation of a class to one object",
    "Line10": "",
    "Line2": " It is used when you want to have one instance of a class that is shared across the application",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 11,
    "Line1": "Strategy pattern allows a client to choose from a family of algorithms at runtime",
    "Line10": "",
    "Line2": " It is used when the client expects to have multiple algorithms and wants to choose one of them at runtime",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 12,
    "Line1": "Visitor pattern is a way of separating an algorithm from an object structure on which it operates",
    "Line10": "",
    "Line2": " A practical result of this separation is the ability to add new operations to existing object structures without modifying the structures",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 13,
    "Line1": "Inversion of Control is a principle in software engineering by which the control of objects or portions of a program is transferred to a container or framework",
    "Line10": "",
    "Line2": " It\u0027s a design principle in which custom-written portions of a computer program receive the flow of control from a generic framework",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 14,
    "Line1": "Lazy initialization is the tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 15,
    "Line1": "Fluent interface allows you do have method chaining",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 16,
    "Line1": "Flyweight pattern is used to reduce the memory and resource usage for complex models containing a large number of similar objects",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 17,
    "Line1": "Abstract Factory is a creational design pattern that lets you produce families of related objects without specifying their concrete classes",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  },
  {
    "Id": 18,
    "Line1": "Observer pattern is a behavioral design pattern that defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically",
    "Line10": "",
    "Line2": "",
    "Line3": "",
    "Line4": "",
    "Line5": "",
    "Line6": "",
    "Line7": "",
    "Line8": "",
    "Line9": ""
  }
]